
//Using UF to do the cycle detection, the code is changed from the author,
//https://algs4.cs.princeton.edu/43mst/UF.java.html
//https://algs4.cs.princeton.edu/43mst/KruskalMST.java.html
public class UnionFind{
    private int[] parent;
    private int[] rank; //rank of subtree at [i]
    //count no need

    public UnionFind(int size){
        parent = new int[size];
        rank = new int[size];
        for(int i=0;i<size;i++){
            parent[i] = i;
            rank[i] = 0;
        }
    }

    public int find(int x){
        if(parent[x] != x){
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    public void union(int x,int y){
        int rootX = find(x);
        int rootY = find(y);
        /*if (rootX==rootY){
            return;
        } */
        if(rootX!=rootY){
            if(rank[rootX]>rank[rootY]){
                parent[rootY] = rootX;
            }else if(rank[rootX] < rank[rootY]){
                parent[rootX] = rootY;
            }else{
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
}
